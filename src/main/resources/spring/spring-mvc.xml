<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
  http://www.springframework.org/schema/beans
  http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
  http://www.springframework.org/schema/context
  http://www.springframework.org/schema/context/spring-context-4.0.xsd
  http://www.springframework.org/schema/aop   
  http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
  http://www.springframework.org/schema/mvc
  http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
  http://www.springframework.org/schema/util        
  http://www.springframework.org/schema/util/spring-util-4.0.xsd ">

	
	<mvc:annotation-driven conversion-service="conversionService" content-negotiation-manager="contentNegotiationManager">
		<mvc:message-converters register-defaults="true">
			<ref bean="stringConverter" />
			<ref bean="fastjsonConverter" />
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!--通知spring使用cglib而不是jdk的来生成代理方法, AOP可以拦截到Controller,因为是拦截Controller,这句必须加在springmvc配置文件中 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	
	<!-- 设置只扫描 controller包下的Bean -->
	<context:component-scan base-package="xyz.taobaok.www.controller" />

	<!-- 类型转换 -->
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
<!--		<property name="formatters">-->
<!--			<set>-->
<!--				<bean class="com.onedesk.dsp.utils.DateFormatterUtil"></bean>-->
<!--			</set>-->
<!--		</property>-->
	</bean>

	<!-- 解析String请求数据 -->
	<bean id="stringConverter"
		class="org.springframework.http.converter.StringHttpMessageConverter">
		<constructor-arg value="UTF-8" index="0"></constructor-arg>
		<!-- 
		<property name="supportedMediaTypes">
			<list>
				<value>text/plain;charset=UTF-8</value>
			</list>
		</property>
		 -->
	</bean>

	<!-- 解析json请求数据，将json转换为java对象 -->
	<bean id="fastjsonConverter"
		class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
		<property name="features">
			<array value-type="com.alibaba.fastjson.serializer.SerializerFeature">
				<!-- 空值继续输出 -->
				<value>WriteMapNullValue</value>
				<value>QuoteFieldNames</value>
				<!-- 防止循环引用 -->
				<value>DisableCircularReferenceDetect</value>
				<!-- 格式化日期,默认格式为：yyyy-MM-dd HH:mm:ss -->
				<value>WriteDateUseDateFormat</value>
			</array>
		</property>
	</bean>

	<!-- 返回类型定义 -->
	<util:list id="messageConverters">
		<ref bean="stringConverter" />
		<ref bean="fastjsonConverter" />
	</util:list>

	<!-- 防止循环引用 -->
	<bean id="DisableCircularReferenceDetect"
		class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
		<property name="staticField"
			value="com.alibaba.fastjson.serializer.SerializerFeature.DisableCircularReferenceDetect"></property>
	</bean>

	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">  
        <!-- 这里是否忽略掉accept header，默认就是false -->
		<property name="ignoreAcceptHeader" value="true" />
		<!-- restful 是否采用参数支持确定内容格式，id?format=json 返回JSON格式 -->
		<property name="favorParameter" value="true"></property>
		<!-- restful 是否采用扩展名的方式确定内容格式，id.json 返回JSON格式 -->
		<property name="favorPathExtension" value="true"></property>
		<!-- 如果所有的mediaType都没匹配上，就会使用defaultContentType -->
		<property name="defaultContentType" value="text/html"/>  
        <property name="mediaTypes">  
            <map>
				<entry key="json" value="application/json" />
				<entry key="xml" value="application/xml" />
				<entry key="html" value="text/html"/>
			</map>
        </property>  
    </bean>

	<!-- ContentNegotiatingViewResolver视图解析器，返回多视图 -->
	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="order" value="1"></property>
		<property name="contentNegotiationManager" ref="contentNegotiationManager"/> 
		<property name="defaultViews">
			<list>
				<!-- json视图 -->
				<bean class="com.alibaba.fastjson.support.spring.FastJsonJsonView">
					<property name="extractValueFromSingleKeyModel" value="true" />
					<property name="features">
						<array value-type="com.alibaba.fastjson.serializer.SerializerFeature">
							<!-- 空值继续输出 -->
							<value>WriteMapNullValue</value>
							<!-- 防止循环引用 -->
							<value>DisableCircularReferenceDetect</value>
							<!-- 格式化日期,默认格式为：yyyy-MM-dd HH:mm:ss -->
							<value>WriteDateUseDateFormat</value>
						</array>
					</property>
				</bean>
			</list>
		</property>
		<property name="viewResolvers">
			<list>
				<!-- 视图解析器，根据视图的名称new ModelAndView(name)，在配置文件查找对应的bean配置 -->
				<bean class="org.springframework.web.servlet.view.BeanNameViewResolver" />
				<bean
					class="org.springframework.web.servlet.view.InternalResourceViewResolver">
					<property name="viewClass"
						value="org.springframework.web.servlet.view.JstlView" />
					<property name="contentType" value="text/html" />
					<property name="prefix" value="/" />
					<property name="suffix" value=".jsp" />
				</bean>

			</list>
		</property>
	</bean>

	<context:property-placeholder ignore-unresolvable="true" location="classpath:*.properties" />
	<!-- 先走默认的web.xml配置的servlet，没有的话才找对应controller,相当于处理配置静态资源，这种方式效率相对比较低,如果DispatcherServlet拦截类似 
		*.do 这种格式的URL，就不存在访问不到静态资源的问题,静态资源访问详见web.xml -->
	<mvc:default-servlet-handler />


</beans>